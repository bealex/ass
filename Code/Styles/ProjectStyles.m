#pragma clang diagnostic push
#pragma ide diagnostic ignored "UnusedImportStatement"
#pragma ide diagnostic ignored "UnavailableInDeploymentTarget"

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file was autogenerated. Please do not fix it manually
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#import "ProjectStyles.h"
#import "ASStylerHelpers.h"
#import "ASStylerTextAttributes.h"

@implementation ASEXHelloLabelStyle
    - (id)init {
        self = [super init];
        if (self) {
            _text = [[NSString alloc] init];
        }
        return self;
    }

    - (id)initWithReloadedCallback:(void (^)())aCallback {
        self = [super init];
        if (self) {
            _text = [[NSString alloc] init];
            [self applyStyle:@"helloLabel" withCallback:aCallback];
        }
        return self;
    }

    - (void)applyTo:(ASStyleObject *)aAnotherObject {
        ((ASEXHelloLabelStyle *) aAnotherObject).text = _text;
    }

    - (void)encodeWithCoder:(NSCoder *)coder {
        [coder encodeObject:_text forKey:@"text"];
    }

    - (id)initWithCoder:(NSCoder *)coder {
        self = [super init];
        if (self) {
            _text = [coder decodeObjectForKey:@"text"];
        }
        return self;
    }
@end


@implementation ASEXHelloLabelTextAttributesStyle
    - (id)init {
        self = [super init];
        if (self) {
            _color = [UIColor cyanColor];
            _font = [UIFont systemFontOfSize:16];
        }
        return self;
    }

    - (id)initWithReloadedCallback:(void (^)())aCallback {
        self = [super init];
        if (self) {
            _color = [UIColor cyanColor];
            _font = [UIFont systemFontOfSize:16];
            [self applyStyle:@"helloLabelTextAttributes" withCallback:aCallback];
        }
        return self;
    }

    - (void)applyTo:(ASStyleObject *)aAnotherObject {
        ((ASEXHelloLabelTextAttributesStyle *) aAnotherObject).alignment = _alignment;
        ((ASEXHelloLabelTextAttributesStyle *) aAnotherObject).color = _color;
        ((ASEXHelloLabelTextAttributesStyle *) aAnotherObject).font = _font;
    }

    - (void)encodeWithCoder:(NSCoder *)coder {
        [coder encodeInteger:_alignment forKey:@"alignment"];
        [coder encodeObject:_color forKey:@"color"];
        if (__DPL_OSVersionMajor__() >= 7) {
            [coder encodeObject:[_font fontDescriptor] forKey:@"font"];
        }
        [coder encodeObject:[_font fontName] forKey:@"font.name"];
        [coder encodeFloat:[_font pointSize] forKey:@"font.size"];
    }

    - (id)initWithCoder:(NSCoder *)coder {
        self = [super init];
        if (self) {
            _alignment = (NSTextAlignment) [coder decodeIntegerForKey:@"alignment"];
            _color = [coder decodeObjectForKey:@"color"];
            CGFloat _font_size = [coder decodeFloatForKey:@"font.size"];
            if (__DPL_OSVersionMajor__() >= 7) {
                id _font_descriptor = [coder decodeObjectForKey:@"font"];
                if (_font_descriptor != nil) {
                    _font = [UIFont fontWithDescriptor:_font_descriptor size:_font_size];
                } else {
                    _font = [UIFont fontWithName:[coder decodeObjectForKey:@"font.name"] size:_font_size];
                }
            } else {
                _font = [UIFont fontWithName:[coder decodeObjectForKey:@"font.name"] size:_font_size];
            }
        }
        return self;
    }
@end


@implementation ASEXStyle
    - (id)init {
        self = [super init];
        if (self) {
            _helloLabel = [[ASEXHelloLabelStyle alloc] init];
            _window = [[ASEXWindowStyle alloc] init];
            _helloLabelTextAttributes = [[ASStylerTextAttributes alloc] init];
        }
        return self;
    }

    - (id)initWithReloadedCallback:(void (^)())aCallback {
        self = [super init];
        if (self) {
            _helloLabel = [[ASEXHelloLabelStyle alloc] init];
            _window = [[ASEXWindowStyle alloc] init];
            _helloLabelTextAttributes = [[ASStylerTextAttributes alloc] init];
            [self applyStyle:@"" withCallback:aCallback];
        }
        return self;
    }

    - (void)applyTo:(ASStyleObject *)aAnotherObject {
        ((ASEXStyle *) aAnotherObject).helloLabel = _helloLabel;
        ((ASEXStyle *) aAnotherObject).window = _window;
        ((ASEXStyle *) aAnotherObject).helloLabelTextAttributes = _helloLabelTextAttributes;
    }

    - (void)encodeWithCoder:(NSCoder *)coder {
        [coder encodeObject:_helloLabel forKey:@"helloLabel"];
        [coder encodeObject:_window forKey:@"window"];
        [coder encodeObject:_helloLabelTextAttributes forKey:@"helloLabelTextAttributes"];
    }

    - (id)initWithCoder:(NSCoder *)coder {
        self = [super init];
        if (self) {
            _helloLabel = [coder decodeObjectForKey:@"helloLabel"];
            _window = [coder decodeObjectForKey:@"window"];
            _helloLabelTextAttributes = [coder decodeObjectForKey:@"helloLabelTextAttributes"];
        }
        return self;
    }
@end


@implementation ASEXWindowStyle
    - (id)init {
        self = [super init];
        if (self) {
            _backgroundColor = [UIColor cyanColor];
        }
        return self;
    }

    - (id)initWithReloadedCallback:(void (^)())aCallback {
        self = [super init];
        if (self) {
            _backgroundColor = [UIColor cyanColor];
            [self applyStyle:@"window" withCallback:aCallback];
        }
        return self;
    }

    - (void)applyTo:(ASStyleObject *)aAnotherObject {
        ((ASEXWindowStyle *) aAnotherObject).keyboardIsDark = _keyboardIsDark;
        ((ASEXWindowStyle *) aAnotherObject).backgroundColor = _backgroundColor;
    }

    - (void)encodeWithCoder:(NSCoder *)coder {
        [coder encodeBool:_keyboardIsDark forKey:@"keyboardIsDark"];
        [coder encodeObject:_backgroundColor forKey:@"backgroundColor"];
    }

    - (id)initWithCoder:(NSCoder *)coder {
        self = [super init];
        if (self) {
            _keyboardIsDark = [coder decodeBoolForKey:@"keyboardIsDark"];
            _backgroundColor = [coder decodeObjectForKey:@"backgroundColor"];
        }
        return self;
    }
@end


